{
  "address": "0xdcdaB251151c345AD527851ECa783521Ea3209E0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "msgSender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "lockedContent",
          "type": "string"
        }
      ],
      "name": "LockedContentViewed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeUpdater",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newValue",
          "type": "uint256"
        }
      ],
      "name": "MintFeesUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeWithdrawer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "MintFeesWithdrawn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "toAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "externalURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "TransferBatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "TransferSingle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "URI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PAUSER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "POLYNETWORK_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "accounts",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        }
      ],
      "name": "balanceOfBatch",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "values",
          "type": "uint256[]"
        }
      ],
      "name": "burnBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getCurrentLockedContentViewTracker",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGhostmarketMintFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getLockedContent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getMetadataJson",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyalties",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct GhostMarketERC1155.Royalty[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltiesBps",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltiesRecipients",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "components": [
            {
              "internalType": "address payable",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            }
          ],
          "internalType": "struct GhostMarketERC1155.Royalty[]",
          "name": "royalties",
          "type": "tuple[]"
        },
        {
          "internalType": "string",
          "name": "externalURI",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "metadata",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "lockedcontent",
          "type": "string"
        }
      ],
      "name": "mintGhost",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintWithURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gmmf",
          "type": "uint256"
        }
      ],
      "name": "setGhostmarketMintFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "uri_",
          "type": "string"
        }
      ],
      "name": "setURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "uri",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x078517f7c97bcd4b6185a50bfe772329f6d8ddfbd860e7c7cd5cc04f8a4a7d65",
  "receipt": {
    "to": null,
    "from": "0x07714A8BF073510996D948D8aA39f8E32627fe62",
    "contractAddress": "0xdcdaB251151c345AD527851ECa783521Ea3209E0",
    "transactionIndex": 3,
    "gasUsed": "4304160",
    "logsBloom": "0x
    "blockHash": "0x418651500d936936be8533d35706d080f5730e8879d5211ec247f4ec123ed2f4",
    "transactionHash": "0x078517f7c97bcd4b6185a50bfe772329f6d8ddfbd860e7c7cd5cc04f8a4a7d65",
    "logs": [],
    "blockNumber": 6218499,
    "cumulativeGasUsed": "4472534",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "09e45438c46c865335fb2498f11519e6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"msgSender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"lockedContent\",\"type\":\"string\"}],\"name\":\"LockedContentViewed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeUpdater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"MintFeesUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeWithdrawer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"MintFeesWithdrawn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"toAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"externalURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"TransferBatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"TransferSingle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"URI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"POLYNETWORK_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"}],\"name\":\"balanceOfBatch\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"burnBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getCurrentLockedContentViewTracker\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGhostmarketMintFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getLockedContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMetadataJson\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyalties\",\"outputs\":[{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct GhostMarketERC1155.Royalty[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltiesBps\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getRoyaltiesRecipients\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address payable\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"internalType\":\"struct GhostMarketERC1155.Royalty[]\",\"name\":\"royalties\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"externalURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lockedcontent\",\"type\":\"string\"}],\"name\":\"mintGhost\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintWithURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gmmf\",\"type\":\"uint256\"}],\"name\":\"setGhostmarketMintFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"uri_\",\"type\":\"string\"}],\"name\":\"setURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"uri\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1155 token with minting, burning, pause, royalties & lock content functions.\",\"kind\":\"dev\",\"methods\":{\"balanceOf(address,uint256)\":{\"details\":\"See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address.\"},\"balanceOfBatch(address[],uint256[])\":{\"details\":\"See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length.\"},\"getCurrentCounter()\":{\"details\":\"current _tokenIdTracker\"},\"getCurrentLockedContentViewTracker(uint256)\":{\"details\":\"get a NFT current locked content view tracker\"},\"getGhostmarketMintFees()\":{\"returns\":{\"_0\":\"get Ghostmarket mint fees\"}},\"getLockedContent(uint256)\":{\"details\":\"get locked content for a NFT emits LockedContentViewed event\"},\"getMetadataJson(uint256)\":{\"details\":\"get a NFT custom attributes\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"getRoyalties(uint256)\":{\"details\":\"get royalties array\"},\"getRoyaltiesBps(uint256)\":{\"details\":\"get a NFT royalties fees fee basis points 10000 = 100%\"},\"getRoyaltiesRecipients(uint256)\":{\"details\":\"get a NFT royalties recipients\"},\"grantRole(bytes32,address)\":{\"details\":\"Overload {grantRole} to track enumerable memberships\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC1155-isApprovedForAll}.\"},\"mintGhost(address,uint256,bytes,(address,uint256)[],string,string,string)\":{\"details\":\"mint NFT, set royalties, set metadata json, set lockedcontent emits Minted event\"},\"mintWithURI(address,uint256,string,uint256)\":{\"details\":\"polynetwork CrossChainNFTMapping\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pause()\":{\"details\":\"Pauses all token transfers. See {ERC1155Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Overload {renounceRole} to track enumerable memberships\"},\"revokeRole(bytes32,address)\":{\"details\":\"Overload {revokeRole} to track enumerable memberships\"},\"safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)\":{\"details\":\"See {IERC1155-safeBatchTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,uint256,bytes)\":{\"details\":\"See {IERC1155-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC1155-setApprovalForAll}.\"},\"setGhostmarketMintFee(uint256)\":{\"details\":\"sets Ghostmarket mint fees as uint256 emits MintFeesUpdated event\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unpause()\":{\"details\":\"Unpauses all token transfers. See {ERC1155Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`.\"},\"uri(uint256)\":{\"details\":\"See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\\\{id\\\\}` substring with the actual token type ID.\"},\"withdraw(uint256)\":{\"details\":\"withdraw contract balance emits MintFeesWithdrawn event\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/GhostmarketERC1155.sol\":\"GhostMarketERC1155\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1337},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AccessControlUpgradeable.sol\\\";\\nimport \\\"../utils/structs/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerableUpgradeable {\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerableUpgradeable, AccessControlUpgradeable {\\n    function __AccessControlEnumerable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n        __AccessControlEnumerable_init_unchained();\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal initializer {\\n    }\\n    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\\n\\n    mapping (bytes32 => EnumerableSetUpgradeable.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerableUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {grantRole} to track enumerable memberships\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override {\\n        super.grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {revokeRole} to track enumerable memberships\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override {\\n        super.revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {renounceRole} to track enumerable memberships\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        super.renounceRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_setupRole} to track enumerable memberships\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual override {\\n        super._setupRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x24809d17a2d5bb3aa7195bbed04e7c228982c2d36e371e8a8cb2364877b0aa34\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../utils/StringsUpgradeable.sol\\\";\\nimport \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControlUpgradeable {\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n    function grantRole(bytes32 role, address account) external;\\n    function revokeRole(bytes32 role, address account) external;\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControlUpgradeable, ERC165Upgradeable {\\n    function __AccessControl_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __AccessControl_init_unchained();\\n    }\\n\\n    function __AccessControl_init_unchained() internal initializer {\\n    }\\n    struct RoleData {\\n        mapping (address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if(!hasRole(role, account)) {\\n            revert(string(abi.encodePacked(\\n                \\\"AccessControl: account \\\",\\n                StringsUpgradeable.toHexString(uint160(account), 20),\\n                \\\" is missing role \\\",\\n                StringsUpgradeable.toHexString(uint256(role), 32)\\n            )));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x719f71989e630280a6902f857ef2b038d761ef2d0d51611f9da463be6c7c4be5\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc68cad93ce702131a09334e8705d4af062278defa99627a2c94685fb96ff8cc4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67d2f282a9678e58e878a0b774041ba7a01e2740a262aea97a3f681339914713\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x742c0fbab73bf595ca40025f6e81cb48dbd5e133950717f7befd062a925c0148\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal initializer {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal initializer {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x89fa60d14355f7ae06af11e28fce2bb90c5c6186645d681a30e1b36234a4c210\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC1155Upgradeable.sol\\\";\\nimport \\\"./IERC1155ReceiverUpgradeable.sol\\\";\\nimport \\\"./extensions/IERC1155MetadataURIUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\nimport \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n *\\n * _Available since v3.1._\\n */\\ncontract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155Upgradeable, IERC1155MetadataURIUpgradeable {\\n    using AddressUpgradeable for address;\\n\\n    // Mapping from token ID to account balances\\n    mapping (uint256 => mapping(address => uint256)) private _balances;\\n\\n    // Mapping from account to operator approvals\\n    mapping (address => mapping(address => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal initializer {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165Upgradeable) returns (bool) {\\n        return interfaceId == type(IERC1155Upgradeable).interfaceId\\n            || interfaceId == type(IERC1155MetadataURIUpgradeable).interfaceId\\n            || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256) public view virtual override returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\\n        require(account != address(0), \\\"ERC1155: balance query for the zero address\\\");\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    )\\n        public\\n        view\\n        virtual\\n        override\\n        returns (uint256[] memory)\\n    {\\n        require(accounts.length == ids.length, \\\"ERC1155: accounts and ids length mismatch\\\");\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(_msgSender() != operator, \\\"ERC1155: setting approval status for self\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        uint256 fromBalance = _balances[id][from];\\n        require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n        _balances[id][from] = fromBalance - amount;\\n        _balances[id][to] += amount;\\n\\n        emit TransferSingle(operator, from, to, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        public\\n        virtual\\n        override\\n    {\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n        require(to != address(0), \\\"ERC1155: transfer to the zero address\\\");\\n        require(\\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\\n            \\\"ERC1155: transfer caller is not owner nor approved\\\"\\n        );\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 fromBalance = _balances[id][from];\\n            require(fromBalance >= amount, \\\"ERC1155: insufficient balance for transfer\\\");\\n            _balances[id][from] = fromBalance - amount;\\n            _balances[id][to] += amount;\\n        }\\n\\n        emit TransferBatch(operator, from, to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - If `account` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\\n        require(account != address(0), \\\"ERC1155: mint to the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\\n\\n        _balances[id][account] += amount;\\n        emit TransferSingle(operator, address(0), account, id, amount);\\n\\n        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\\n        require(to != address(0), \\\"ERC1155: mint to the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            _balances[ids[i]][to] += amounts[i];\\n        }\\n\\n        emit TransferBatch(operator, address(0), to, ids, amounts);\\n\\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens of token type `id` from `account`\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens of token type `id`.\\n     */\\n    function _burn(address account, uint256 id, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), \\\"\\\");\\n\\n        uint256 accountBalance = _balances[id][account];\\n        require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n        _balances[id][account] = accountBalance - amount;\\n\\n        emit TransferSingle(operator, account, address(0), id, amount);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     */\\n    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\\n        require(account != address(0), \\\"ERC1155: burn from the zero address\\\");\\n        require(ids.length == amounts.length, \\\"ERC1155: ids and amounts length mismatch\\\");\\n\\n        address operator = _msgSender();\\n\\n        _beforeTokenTransfer(operator, account, address(0), ids, amounts, \\\"\\\");\\n\\n        for (uint i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            uint256 amount = amounts[i];\\n\\n            uint256 accountBalance = _balances[id][account];\\n            require(accountBalance >= amount, \\\"ERC1155: burn amount exceeds balance\\\");\\n            _balances[id][account] = accountBalance - amount;\\n        }\\n\\n        emit TransferBatch(operator, account, address(0), ids, amounts);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning, as well as batched variants.\\n     *\\n     * The same hook is called on both single and batched variants. For single\\n     * transfers, the length of the `id` and `amount` arrays will be 1.\\n     *\\n     * Calling conditions (for each `id` and `amount` pair):\\n     *\\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * of token type `id` will be  transferred to `to`.\\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\\n     * for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\\n     * will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `ids` and `amounts` have the same, non-zero length.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n    { }\\n\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155Received.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        private\\n    {\\n        if (to.isContract()) {\\n            try IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\\n                if (response != IERC1155ReceiverUpgradeable(to).onERC1155BatchReceived.selector) {\\n                    revert(\\\"ERC1155: ERC1155Receiver rejected tokens\\\");\\n                }\\n            } catch Error(string memory reason) {\\n                revert(reason);\\n            } catch {\\n                revert(\\\"ERC1155: transfer to non ERC1155Receiver implementer\\\");\\n            }\\n        }\\n    }\\n\\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\\n        uint256[] memory array = new uint256[](1);\\n        array[0] = element;\\n\\n        return array;\\n    }\\n    uint256[47] private __gap;\\n}\\n\",\"keccak256\":\"0x9bd2707e55ec6da4d7f9c763d2e78ae7a954019deb798ed5bf59862cf1064b32\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\\n\\n    /**\\n        @dev Handles the receipt of a single ERC1155 token type. This function is\\n        called at the end of a `safeTransferFrom` after the balance has been updated.\\n        To accept the transfer, this must return\\n        `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n        (i.e. 0xf23a6e61, or its own function selector).\\n        @param operator The address which initiated the transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param id The ID of the token being transferred\\n        @param value The amount of tokens being transferred\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n\\n    /**\\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\\n        is called at the end of a `safeBatchTransferFrom` after the balances have\\n        been updated. To accept the transfer(s), this must return\\n        `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n        (i.e. 0xbc197c81, or its own function selector).\\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n        @param from The address which previously owned the token\\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n        @param data Additional data with no specified format\\n        @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n    */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    )\\n        external\\n        returns(bytes4);\\n}\\n\",\"keccak256\":\"0xd841c561258151c3c22f05feb68c702fc414b112606bd72b848e8a65af128c30\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/IERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\\n}\\n\",\"keccak256\":\"0xa22cd3d499a04af4dbcc1b15877b69b611004ff02a2ab121e42226a6b6a88ab9\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC1155} that allows token holders to destroy both their\\n * own tokens and those that they have been approved to use.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155BurnableUpgradeable is Initializable, ERC1155Upgradeable {\\n    function __ERC1155Burnable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __ERC1155Burnable_init_unchained();\\n    }\\n\\n    function __ERC1155Burnable_init_unchained() internal initializer {\\n    }\\n    function burn(address account, uint256 id, uint256 value) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burn(account, id, value);\\n    }\\n\\n    function burnBatch(address account, uint256[] memory ids, uint256[] memory values) public virtual {\\n        require(\\n            account == _msgSender() || isApprovedForAll(account, _msgSender()),\\n            \\\"ERC1155: caller is not owner nor approved\\\"\\n        );\\n\\n        _burnBatch(account, ids, values);\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbb5aea481bb5a8ea0fe842622dbddbb4ecc8185e014d9577da73acdc230a1d7e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC1155Upgradeable.sol\\\";\\nimport \\\"../../../security/PausableUpgradeable.sol\\\";\\nimport \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * _Available since v3.1._\\n */\\nabstract contract ERC1155PausableUpgradeable is Initializable, ERC1155Upgradeable, PausableUpgradeable {\\n    function __ERC1155Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __ERC165_init_unchained();\\n        __Pausable_init_unchained();\\n        __ERC1155Pausable_init_unchained();\\n    }\\n\\n    function __ERC1155Pausable_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {ERC1155-_beforeTokenTransfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _beforeTokenTransfer(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    )\\n        internal\\n        virtual\\n        override\\n    {\\n        super._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\n        require(!paused(), \\\"ERC1155Pausable: token transfer while paused\\\");\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xf90318e28159b89748c7e091c5a3666f55722a9c2e717a54c24bf60eb20e68d0\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/IERC1155MetadataURIUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC1155Upgradeable.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155MetadataURIUpgradeable is IERC1155Upgradeable {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x6d0b5e3282b9f7683eb822a01bd5351d01bd9225cd8153e366c9a54e89213165\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5642ae1d6b33c5c0b71a8412c6c64cbcf2468b84a002bee3e33cdb5644d25cdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x8e9eb503de1189f50c5f16fef327da310b11898d6b9ab3ca937df07c35233b9e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary CountersUpgradeable {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xec472de031bf21bae80739c99f9fec4edcd0d728e424f0f557c4288b3e58e49d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary StringsUpgradeable {\\n    bytes16 private constant alphabet = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = alphabet[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n}\\n\",\"keccak256\":\"0x6964377da5c19ade6b3e96bae0c0e82494d518af70cf12d2cdb3276f78fb3d85\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Storage based implementation of the {IERC165} interface.\\n *\\n * Contracts may inherit from this and call {_registerInterface} to declare\\n * their support of an interface.\\n */\\nabstract contract ERC165StorageUpgradeable is Initializable, ERC165Upgradeable {\\n    function __ERC165Storage_init() internal initializer {\\n        __ERC165_init_unchained();\\n        __ERC165Storage_init_unchained();\\n    }\\n\\n    function __ERC165Storage_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev Mapping of interface ids to whether or not it's supported.\\n     */\\n    mapping(bytes4 => bool) private _supportedInterfaces;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return super.supportsInterface(interfaceId) || _supportedInterfaces[interfaceId];\\n    }\\n\\n    /**\\n     * @dev Registers the contract as an implementer of the interface defined by\\n     * `interfaceId`. Support of the actual ERC165 interface is automatic and\\n     * registering its interface id is not required.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * Requirements:\\n     *\\n     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\\n     */\\n    function _registerInterface(bytes4 interfaceId) internal virtual {\\n        require(interfaceId != 0xffffffff, \\\"ERC165: invalid interface id\\\");\\n        _supportedInterfaces[interfaceId] = true;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xc5e7ff796ff1ebb0d5a3efa8059a4abe97926fc15390b59ff0fe2a2e6ec1f48f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165Upgradeable.sol\\\";\\nimport \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\\n    function __ERC165_init() internal initializer {\\n        __ERC165_init_unchained();\\n    }\\n\\n    function __ERC165_init_unchained() internal initializer {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x17c9c5d2d6b56527215ee7b3da6dde66b6f23f1b3d5c66cc436e753ef349a97a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x1c4860acd323e34a67b3e97faab9aaa55fe8e92b1dcf08b5f47f3468d58ce75c\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/structs/EnumerableSetUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSetUpgradeable {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x23e71de3279b56332a1d2e469efe69f82b7408847cc3d7d2d06a66f465837342\",\"license\":\"MIT\"},\"src/ERC1155PresetMinterPauserUpgradeableCustom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155BurnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/extensions/ERC1155PausableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/AccessControlEnumerableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev {ERC1155} token, including:\\n *\\n *  - ability for holders to burn (destroy) their tokens\\n *  - a minter role that allows for token minting (creation)\\n *  - a pauser role that allows to stop all token transfers\\n *\\n * This contract uses {AccessControl} to lock permissioned functions using the\\n * different roles - head to its documentation for details.\\n *\\n * The account that deploys the contract will be granted the minter and pauser\\n * roles, as well as the default admin role, which will let it grant both minter\\n * and pauser roles to other accounts.\\n */\\ncontract ERC1155PresetMinterPauserUpgradeableCustom is\\n\\tInitializable,\\n\\tContextUpgradeable,\\n\\tAccessControlEnumerableUpgradeable,\\n\\tERC1155BurnableUpgradeable,\\n\\tERC1155PausableUpgradeable\\n{\\n\\n\\tbytes32 public constant MINTER_ROLE = keccak256(\\\"MINTER_ROLE\\\");\\n\\tbytes32 public constant PAUSER_ROLE = keccak256(\\\"PAUSER_ROLE\\\");\\n\\tbytes32 public constant POLYNETWORK_ROLE = keccak256(\\\"POLYNETWORK_ROLE\\\");\\n\\n\\t/**\\n\\t * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE`, and `PAUSER_ROLE` to the account that\\n\\t * deploys the contract.\\n\\t */\\n\\tfunction __ERC1155PresetMinterPauser_init(string memory uri) internal initializer {\\n\\t\\t__Context_init_unchained();\\n\\t\\t__ERC165_init_unchained();\\n\\t\\t__AccessControl_init_unchained();\\n\\t\\t__AccessControlEnumerable_init_unchained();\\n\\t\\t__ERC1155_init_unchained(uri);\\n\\t\\t__ERC1155Burnable_init_unchained();\\n\\t\\t__Pausable_init_unchained();\\n\\t\\t__ERC1155Pausable_init_unchained();\\n\\t\\t__ERC1155PresetMinterPauser_init_unchained();\\n\\t}\\n\\n\\tfunction __ERC1155PresetMinterPauser_init_unchained() internal initializer {\\n\\t\\t_setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\\n\\t\\t_setupRole(MINTER_ROLE, _msgSender());\\n\\t\\t_setupRole(PAUSER_ROLE, _msgSender());\\n\\t\\t_setupRole(POLYNETWORK_ROLE, _msgSender());\\n\\t}\\n\\n\\t/**\\n\\t * @dev polynetwork CrossChainNFTMapping\\n\\t */\\n\\tfunction mintWithURI(\\n\\t\\taddress to,\\n\\t\\tuint256 tokenId,\\n\\t\\tstring memory uri,\\n\\t\\tuint256 amount\\n\\t) external {\\n\\t\\trequire(hasRole(POLYNETWORK_ROLE, _msgSender()), \\\"mintWithURI: must have POLYNETWORK_ROLE role to mint\\\");\\n\\t\\t_mint(to, tokenId, amount, \\\"\\\");\\n\\t\\t_setURI(uri);\\n\\t}\\n\\n\\tfunction setURI(string memory uri_) external {\\n\\t\\trequire(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have admin role to set new uri\\\");\\n\\t\\t_setURI(uri_);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates `amount` new tokens for `to`, of token type `id`.\\n\\t *\\n\\t * See {ERC1155-_mint}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - the caller must have the `MINTER_ROLE`.\\n\\t */\\n\\tfunction mint(\\n\\t\\taddress to,\\n\\t\\tuint256 id,\\n\\t\\tuint256 amount,\\n\\t\\tbytes memory data\\n\\t) internal virtual {\\n\\t\\t_mint(to, id, amount, data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] variant of {mint}.\\n\\t */\\n\\tfunction mintBatch(\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal virtual {\\n\\t\\trequire(hasRole(MINTER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have minter role to mint\\\");\\n\\n\\t\\t_mintBatch(to, ids, amounts, data);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Pauses all token transfers.\\n\\t *\\n\\t * See {ERC1155Pausable} and {Pausable-_pause}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - the caller must have the `PAUSER_ROLE`.\\n\\t */\\n\\tfunction pause() public virtual {\\n\\t\\trequire(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have pauser role to pause\\\");\\n\\t\\t_pause();\\n\\t}\\n\\n\\t/**\\n\\t * @dev Unpauses all token transfers.\\n\\t *\\n\\t * See {ERC1155Pausable} and {Pausable-_unpause}.\\n\\t *\\n\\t * Requirements:\\n\\t *\\n\\t * - the caller must have the `PAUSER_ROLE`.\\n\\t */\\n\\tfunction unpause() public virtual {\\n\\t\\trequire(hasRole(PAUSER_ROLE, _msgSender()), \\\"ERC1155PresetMinterPauser: must have pauser role to unpause\\\");\\n\\t\\t_unpause();\\n\\t}\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(AccessControlEnumerableUpgradeable, ERC1155Upgradeable) returns (bool) {\\n\\t\\treturn super.supportsInterface(interfaceId);\\n\\t}\\n\\n\\tfunction _beforeTokenTransfer(\\n\\t\\taddress operator,\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256[] memory ids,\\n\\t\\tuint256[] memory amounts,\\n\\t\\tbytes memory data\\n\\t) internal virtual override(ERC1155Upgradeable, ERC1155PausableUpgradeable) {\\n\\t\\tsuper._beforeTokenTransfer(operator, from, to, ids, amounts, data);\\n\\t}\\n\\n\\tuint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xf03740a037c56aa8fd1c3fdae4ab56483d5a7fa9be296465523f0530aa88fc23\",\"license\":\"MIT\"},\"src/GhostmarketERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC1155PresetMinterPauserUpgradeableCustom.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165StorageUpgradeable.sol\\\";\\n\\n/**\\n * @dev ERC1155 token with minting, burning, pause, royalties & lock content functions.\\n */\\n\\ncontract GhostMarketERC1155 is Initializable, ERC1155PresetMinterPauserUpgradeableCustom, ReentrancyGuardUpgradeable, OwnableUpgradeable, ERC165StorageUpgradeable {\\n\\tstring public name;\\n\\tstring public symbol;\\n\\n\\t// struct for royalties fees\\n\\tstruct Royalty {\\n\\t\\taddress payable recipient;\\n\\t\\tuint256 value;\\n\\t}\\n\\n\\t// tokenId => royalties array\\n\\tmapping(uint256 => Royalty[]) internal _royalties;\\n\\n\\t// tokenId => locked content array\\n\\tmapping(uint256 => string) internal _lockedContent;\\n\\n\\t// tokenId => locked content view counter array\\n\\tmapping(uint256 => uint256) internal _lockedContentViewTracker;\\n    \\n    // tokenId => attributes array\\n\\tmapping(uint256 => string) internal _metadataJson;\\n\\n\\t// events\\n\\tevent LockedContentViewed(address msgSender, uint256 tokenId, string lockedContent);\\n\\tevent MintFeesWithdrawn(address feeWithdrawer, uint256 withdrawAmount);\\n\\tevent MintFeesUpdated(address feeUpdater, uint256 newValue);\\n\\tevent Minted(address toAddress, uint256 tokenId, string externalURI, uint256 amount);\\n\\n    // mint fees balance\\n\\tuint256 internal _payedMintFeesBalance;\\n\\n\\t// mint fees value\\n\\tuint256 internal _ghostmarketMintFees;\\n\\n\\t/**\\n\\t * bytes4(keccak256(_INTERFACE_ID_ERC1155_GHOSTMARKET)) == 0x94407210\\n\\t */\\n\\tbytes4 constant _INTERFACE_ID_ERC1155_GHOSTMARKET = bytes4(keccak256(\\\"_INTERFACE_ID_ERC1155_GHOSTMARKET\\\"));\\n\\n\\t/**\\n\\t * bytes4(keccak256(_GHOSTMARKET_NFT_ROYALTIES)) == 0xe42093a6\\n\\t */\\n\\tbytes4 constant _GHOSTMARKET_NFT_ROYALTIES = bytes4(keccak256(\\\"_GHOSTMARKET_NFT_ROYALTIES\\\"));\\n\\n\\tfunction initialize(string memory _name, string memory _symbol, string memory uri)\\n        public\\n        virtual\\n        initializer\\n    {\\n\\t\\t__Context_init_unchained();\\n\\t\\t__ERC165_init_unchained();\\n\\t\\t__AccessControl_init_unchained();\\n\\t\\t__AccessControlEnumerable_init_unchained();\\n\\t\\t__ERC1155_init_unchained(uri);\\n\\t\\t__ERC1155Burnable_init_unchained();\\n\\t\\t__Pausable_init_unchained();\\n\\t\\t__ERC1155Pausable_init_unchained();\\n\\t\\t__ERC1155PresetMinterPauser_init_unchained();\\n\\t\\t__Ownable_init_unchained();\\n\\t\\t_registerInterface(_INTERFACE_ID_ERC1155_GHOSTMARKET);\\n\\t\\t_registerInterface(_GHOSTMARKET_NFT_ROYALTIES);\\n\\t\\tname = _name;\\n\\t\\tsymbol = _symbol;\\n\\t\\t_tokenIdTracker.increment();\\n\\t}\\n\\n\\tusing CountersUpgradeable for CountersUpgradeable.Counter;\\n\\n\\t// _tokenIdTracker to generate automated token IDs\\n\\tCountersUpgradeable.Counter private _tokenIdTracker;\\n\\n\\t/**\\n\\t * @dev See {IERC165-supportsInterface}.\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC1155PresetMinterPauserUpgradeableCustom, ERC165StorageUpgradeable) returns (bool) {\\n\\t\\treturn super.supportsInterface(interfaceId);\\n\\t}\\n\\t\\n\\t/**\\n\\t\\t* @dev check if msg.sender is owner of NFT id\\n\\t\\t*/\\n\\tfunction _ownerOf(uint256 tokenId)\\n\\t\\t\\tinternal\\n\\t\\t\\tview\\n\\t\\t\\treturns (bool)\\n\\t{\\n\\t\\t\\treturn balanceOf(msg.sender, tokenId) != 0;\\n\\t}\\n\\n\\n    /**\\n\\t * @dev set a NFT royalties fees & recipients\\n\\t * fee basis points 10000 = 100%\\n\\t */\\n\\tfunction _saveRoyalties(uint256 tokenId, Royalty[] memory royalties)\\n        internal\\n    {\\n\\t\\tfor (uint256 i = 0; i < royalties.length; i++) {\\n\\t\\t\\trequire(royalties[i].recipient != address(0x0), \\\"Recipient should be present\\\");\\n\\t\\t\\trequire(royalties[i].value > 0, \\\"Royalties value should be positive\\\");\\n            require(royalties[i].value <= 5000, \\\"Royalties value should not be more than 50%\\\");\\n\\t\\t\\t_royalties[tokenId].push(royalties[i]);\\n\\t\\t}\\n\\t}\\n\\n    /**\\n\\t * @dev set a NFT custom attributes to contract storage\\n\\t */\\n\\tfunction _setMetadataJson(uint256 tokenId, string memory metadataJson)\\n        internal\\n    {\\n\\t\\t_metadataJson[tokenId] = metadataJson;\\n\\t}\\n\\n\\t/**\\n\\t * @dev set a NFT locked content as string\\n\\t */\\n\\tfunction _setLockedContent(uint256 tokenId, string memory content)\\n        internal\\n    {\\n\\t\\t_lockedContent[tokenId] = content;\\n\\t}\\n\\n\\t/**\\n\\t * @dev check mint fees sent to contract\\n\\t * emits MintFeesPaid event if set\\n\\t */\\n\\tfunction _checkMintFees()\\n        internal\\n    {\\n\\t\\tif (_ghostmarketMintFees > 0) {\\n\\t\\t\\trequire(msg.value == _ghostmarketMintFees, \\\"Wrong fees value sent to GhostMarket for mint fees\\\");\\n\\t\\t}\\n\\t\\tif (msg.value > 0) {\\n\\t\\t\\t_payedMintFeesBalance += msg.value;\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev increment a NFT locked content view tracker\\n\\t */\\n\\tfunction _incrementCurrentLockedContentViewTracker(uint256 tokenId)\\n        internal\\n    {\\n\\t\\t_lockedContentViewTracker[tokenId] = _lockedContentViewTracker[tokenId] + 1;\\n\\t}\\n\\n\\t/**\\n\\t * @dev mint NFT, set royalties, set metadata json, set lockedcontent\\n\\t * emits Minted event\\n\\t */\\n\\tfunction mintGhost(address to, uint256 amount, bytes memory data, Royalty[] memory royalties, string memory externalURI, string memory metadata, string memory lockedcontent)\\n        external\\n        payable\\n        nonReentrant\\n    {\\n\\t\\trequire(to != address(0x0), \\\"to can't be empty\\\");\\n\\t\\trequire(keccak256(abi.encodePacked(externalURI)) != keccak256(abi.encodePacked(\\\"\\\")), \\\"externalURI can't be empty\\\");\\n\\t\\tmint(to, _tokenIdTracker.current(), amount, data);\\n\\t\\tif (royalties.length > 0) {\\n\\t\\t\\t_saveRoyalties(_tokenIdTracker.current(), royalties);\\n\\t\\t}\\n\\t\\tif (keccak256(abi.encodePacked(metadata)) != keccak256(abi.encodePacked(\\\"\\\"))) {\\n\\t\\t\\t_setMetadataJson(_tokenIdTracker.current(), metadata);\\n\\t\\t}\\n\\t\\tif (keccak256(abi.encodePacked(lockedcontent)) != keccak256(abi.encodePacked(\\\"\\\"))) {\\n\\t\\t\\t_setLockedContent(_tokenIdTracker.current(), lockedcontent);\\n\\t\\t}\\n\\t\\t_checkMintFees();\\n\\t\\temit Minted(to, _tokenIdTracker.current(), externalURI, amount);\\n\\t\\t_tokenIdTracker.increment();\\n\\t}\\n\\n\\t/**\\n\\t * @dev withdraw contract balance\\n\\t * emits MintFeesWithdrawn event\\n\\t */\\n\\tfunction withdraw(uint256 withdrawAmount)\\n        external\\n        onlyOwner\\n    {\\n\\t\\trequire(withdrawAmount > 0 && withdrawAmount <= _payedMintFeesBalance, \\\"Withdraw amount should be greater then 0 and less then contract balance\\\");\\n\\t\\t_payedMintFeesBalance -= withdrawAmount;\\n\\t\\t(bool success, ) = msg.sender.call{value: withdrawAmount}(\\\"\\\");\\n\\t\\trequire(success, \\\"Transfer failed.\\\");\\n\\t\\temit MintFeesWithdrawn(msg.sender, withdrawAmount);\\n\\t}\\n\\n    /**\\n\\t * @dev sets Ghostmarket mint fees as uint256\\n\\t * emits MintFeesUpdated event\\n\\t */\\n\\tfunction setGhostmarketMintFee(uint256 gmmf)\\n        external\\n    {\\n\\t\\trequire(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \\\"Caller must have admin role to set mint fees\\\");\\n\\t\\t_ghostmarketMintFees = gmmf;\\n\\t\\temit MintFeesUpdated(msg.sender, _ghostmarketMintFees);\\n\\t}\\n\\n\\t/**\\n\\t * @return get Ghostmarket mint fees\\n\\t */\\n\\tfunction getGhostmarketMintFees()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n\\t\\treturn _ghostmarketMintFees;\\n\\t}\\n\\n\\t/**\\n\\t * @dev get locked content for a NFT\\n\\t * emits LockedContentViewed event\\n\\t */\\n\\tfunction getLockedContent(uint256 tokenId)\\n        external\\n    {\\n    require(_ownerOf(tokenId), \\\"Caller must be the owner of the NFT\\\");\\n\\t\\t_incrementCurrentLockedContentViewTracker(tokenId);\\n\\t\\temit LockedContentViewed(msg.sender, tokenId, _lockedContent[tokenId]);\\n\\t}\\n\\n\\t/**\\n\\t * @dev get a NFT current locked content view tracker\\n\\t */\\n\\tfunction getCurrentLockedContentViewTracker(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n\\t\\treturn _lockedContentViewTracker[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev get a NFT custom attributes\\n\\t */\\n\\tfunction getMetadataJson(uint256 tokenId)\\n        external\\n        view\\n        returns (string memory)\\n    {\\n\\t\\treturn _metadataJson[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev get royalties array\\n\\t */\\n\\tfunction getRoyalties(uint256 tokenId)\\n        external\\n        view\\n        returns (Royalty[] memory)\\n    {\\n\\t\\treturn \\t_royalties[tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @dev get a NFT royalties recipients\\n\\t */\\n\\tfunction getRoyaltiesRecipients(uint256 tokenId)\\n        external\\n        view\\n        returns (address payable[] memory)\\n    {\\n\\t\\tRoyalty[] memory royalties = _royalties[tokenId];\\n\\t\\taddress payable[] memory result = new address payable[](royalties.length);\\n\\t\\tfor (uint256 i = 0; i < royalties.length; i++) {\\n\\t\\t\\tresult[i] = royalties[i].recipient;\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n\\t/**\\n\\t * @dev get a NFT royalties fees\\n\\t * fee basis points 10000 = 100%\\n\\t */\\n\\tfunction getRoyaltiesBps(uint256 tokenId)\\n        external\\n        view\\n        returns (uint256[] memory)\\n    {\\n\\t\\tRoyalty[] memory royalties = _royalties[tokenId];\\n\\t\\tuint256[] memory result = new uint256[](royalties.length);\\n\\t\\tfor (uint256 i = 0; i < royalties.length; i++) {\\n\\t\\t\\tresult[i] = royalties[i].value;\\n\\t\\t}\\n\\t\\treturn result;\\n\\t}\\n\\n  /**\\n\\t * @dev current _tokenIdTracker\\n\\t */\\n\\tfunction getCurrentCounter()\\n        external\\n        view\\n        returns (uint256)\\n    {\\n\\t\\treturn _tokenIdTracker.current();\\n\\t}\\n\\n\\tuint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3f486807fd91a7ff792d90747d890760cf178bf5ad6c2cb3867634fa88a7d51f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614d0a806100206000396000f3fe6080604052600436106102db5760003560e01c80639010d07c11610184578063d5391393116100d6578063e985e9c51161008a578063f2fde38b11610064578063f2fde38b1461088a578063f5298aca146108aa578063f7d027de146108ca57600080fd5b8063e985e9c5146107f4578063edcbc0bd1461083d578063f242432a1461086a57600080fd5b8063dac0f3d9116100bb578063dac0f3d91461078a578063e24dbeae146107aa578063e63ab1e9146107c057600080fd5b8063d539139314610736578063d547741f1461076a57600080fd5b8063a22cb46511610138578063c1793c5811610112578063c1793c58146106c8578063c6f4f0f0146106e8578063ca15c8731461071657600080fd5b8063a22cb4651461065b578063a6487c531461067b578063bb3bafd61461069b57600080fd5b806395d89b411161016957806395d89b41146105fd5780639ceea66514610612578063a217fddf1461064657600080fd5b80639010d07c1461059757806391d14854146105b757600080fd5b806336568abe1161023d5780636b20c454116101f157806383fa237b116101cb57806383fa237b1461053c5780638456cb591461054f5780638da5cb5b1461056457600080fd5b80636b20c454146104f2578063715018a61461051257806373448c461461052757600080fd5b80633f4ba83a116102225780633f4ba83a146104975780634e1273f4146104ac5780635c975abb146104d957600080fd5b806336568abe1461045757806336edac961461047757600080fd5b80631c7e78f3116102945780632e1a7d4d116102795780632e1a7d4d146103f75780632eb2c2d6146104175780632f2ff15d1461043757600080fd5b80631c7e78f3146103a7578063248a9ca3146103c757600080fd5b806302fe5305116102c557806302fe53051461034357806306fdde03146103655780630e89341c1461038757600080fd5b8062fdd58e146102e057806301ffc9a714610313575b600080fd5b3480156102ec57600080fd5b506103006102fb36600461432d565b6108ea565b6040519081526020015b60405180910390f35b34801561031f57600080fd5b5061033361032e3660046145fb565b610998565b604051901515815260200161030a565b34801561034f57600080fd5b5061036361035e366004614633565b6109a3565b005b34801561037157600080fd5b5061037a610a2c565b60405161030a9190614a6a565b34801561039357600080fd5b5061037a6103a236600461459e565b610abb565b3480156103b357600080fd5b506103636103c236600461459e565b610b4f565b3480156103d357600080fd5b506103006103e236600461459e565b60009081526065602052604090206001015490565b34801561040357600080fd5b5061036361041236600461459e565b610c20565b34801561042357600080fd5b50610363610432366004614178565b610e13565b34801561044357600080fd5b506103636104523660046145b6565b61118a565b34801561046357600080fd5b506103636104723660046145b6565b6111b1565b34801561048357600080fd5b5061036361049236600461443e565b6111d3565b3480156104a357600080fd5b50610363611299565b3480156104b857600080fd5b506104cc6104c73660046144d1565b61133f565b60405161030a9190614a29565b3480156104e557600080fd5b5061012d5460ff16610333565b3480156104fe57600080fd5b5061036361050d366004614289565b6114b5565b34801561051e57600080fd5b5061036361153a565b34801561053357600080fd5b506103006115ee565b61036361054a366004614358565b6115ff565b34801561055b57600080fd5b5061036361186a565b34801561057057600080fd5b506101f5546001600160a01b03165b6040516001600160a01b03909116815260200161030a565b3480156105a357600080fd5b5061057f6105b23660046145da565b61190e565b3480156105c357600080fd5b506103336105d23660046145b6565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561060957600080fd5b5061037a61192d565b34801561061e57600080fd5b506103007f8a9d57248f1015d5cac20111fe2512477434cf493627e5e959ca751e593d807981565b34801561065257600080fd5b50610300600081565b34801561066757600080fd5b506103636106763660046142fc565b61193b565b34801561068757600080fd5b5061036361069636600461466e565b611a26565b3480156106a757600080fd5b506106bb6106b636600461459e565b611bb7565b60405161030a91906149d1565b3480156106d457600080fd5b506104cc6106e336600461459e565b611c40565b3480156106f457600080fd5b5061030061070336600461459e565b600090815261025d602052604090205490565b34801561072257600080fd5b5061030061073136600461459e565b611d85565b34801561074257600080fd5b506103007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b34801561077657600080fd5b506103636107853660046145b6565b611d9c565b34801561079657600080fd5b506103636107a536600461459e565b611da6565b3480156107b657600080fd5b5061026054610300565b3480156107cc57600080fd5b506103007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b34801561080057600080fd5b5061033361080f366004614140565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205460ff1690565b34801561084957600080fd5b5061085d61085836600461459e565b611e5f565b60405161030a9190614984565b34801561087657600080fd5b50610363610885366004614222565b611fb1565b34801561089657600080fd5b506103636108a5366004614124565b6121f8565b3480156108b657600080fd5b506103636108c536600461449d565b61233a565b3480156108d657600080fd5b5061037a6108e536600461459e565b6123bf565b60006001600160a01b03831661096d5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600081815260c9602090815260408083206001600160a01b03861684529091529020545b92915050565b6000610992826123dd565b6109ae6000336105d2565b610a205760405162461bcd60e51b815260206004820152603e60248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652061646d696e20726f6c6520746f20736574206e65772075726900006064820152608401610964565b610a298161240f565b50565b6102598054610a3a90614b32565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6690614b32565b8015610ab35780601f10610a8857610100808354040283529160200191610ab3565b820191906000526020600020905b815481529060010190602001808311610a9657829003601f168201915b505050505081565b606060cb8054610aca90614b32565b80601f0160208091040260200160405190810160405280929190818152602001828054610af690614b32565b8015610b435780601f10610b1857610100808354040283529160200191610b43565b820191906000526020600020905b815481529060010190602001808311610b2657829003601f168201915b50505050509050919050565b610b5881612426565b610bca5760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206d75737420626520746865206f776e6572206f66207468652060448201527f4e465400000000000000000000000000000000000000000000000000000000006064820152608401610964565b610bd38161243a565b600081815261025c60205260409081902090517f544b1d1249133c50ce89743ed1ca34a815bd50d42b71e6d331a1ac560013a8ec91610c1591339185916148c5565b60405180910390a150565b6101f5546001600160a01b03163314610c7b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610964565b600081118015610c8e575061025f548111155b610d265760405162461bcd60e51b815260206004820152604760248201527f576974686472617720616d6f756e742073686f756c642062652067726561746560448201527f72207468656e203020616e64206c657373207468656e20636f6e74726163742060648201527f62616c616e636500000000000000000000000000000000000000000000000000608482015260a401610964565b8061025f6000828254610d399190614ad8565b9091555050604051600090339083908381818185875af1925050503d8060008114610d80576040519150601f19603f3d011682016040523d82523d6000602084013e610d85565b606091505b5050905080610dd65760405162461bcd60e51b815260206004820152601060248201527f5472616e73666572206661696c65642e000000000000000000000000000000006044820152606401610964565b60408051338152602081018490527f3c897fa64265e543b9d36df079688f87240185d1bf1a937e4c45a56e11678736910160405180910390a15050565b8151835114610e755760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610964565b6001600160a01b038416610ed95760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610964565b6001600160a01b038516331480610ef55750610ef5853361080f565b610f675760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f76656400000000000000000000000000006064820152608401610964565b33610f76818787878787612468565b60005b845181101561111c576000858281518110610fa457634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110610fd057634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815260c9835260408082206001600160a01b038e1683529093529190912054909150818110156110775760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610964565b6110818282614ad8565b60c9600085815260200190815260200160002060008c6001600160a01b03166001600160a01b03168152602001908152602001600020819055508160c9600085815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546111019190614aa1565b925050819055505050508061111590614bc0565b9050610f79565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161116c929190614a3c565b60405180910390a4611182818787878787612476565b505050505050565b611194828261262b565b60008281526097602052604090206111ac9082612651565b505050565b6111bb8282612666565b60008281526097602052604090206111ac90826126ee565b6111fd7f8a9d57248f1015d5cac20111fe2512477434cf493627e5e959ca751e593d8079336105d2565b61126f5760405162461bcd60e51b815260206004820152603460248201527f6d696e74576974685552493a206d757374206861766520504f4c594e4554574f60448201527f524b5f524f4c4520726f6c6520746f206d696e740000000000000000000000006064820152608401610964565b61128a84848360405180602001604052806000815250612703565b6112938261240f565b50505050565b6112c37f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336105d2565b6113355760405162461bcd60e51b815260206004820152603b60248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f20756e706175736500000000006064820152608401610964565b61133d612829565b565b606081518351146113b85760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610964565b6000835167ffffffffffffffff8111156113e257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561140b578160200160208202803683370190505b50905060005b84518110156114ad5761147285828151811061143d57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061146557634e487b7160e01b600052603260045260246000fd5b60200260200101516108ea565b82828151811061149257634e487b7160e01b600052603260045260246000fd5b60209081029190910101526114a681614bc0565b9050611411565b509392505050565b6001600160a01b0383163314806114d157506114d1833361080f565b61152f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610964565b6111ac8383836128c7565b6101f5546001600160a01b031633146115955760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610964565b6101f5546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36101f5805473ffffffffffffffffffffffffffffffffffffffff19169055565b60006115fa6102615490565b905090565b60026101c35414156116535760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610964565b60026101c3556001600160a01b0387166116af5760405162461bcd60e51b815260206004820152601160248201527f746f2063616e277420626520656d7074790000000000000000000000000000006044820152606401610964565b60408051600081526020810180835281519020916116cf9186910161474e565b6040516020818303038152906040528051906020012014156117335760405162461bcd60e51b815260206004820152601a60248201527f65787465726e616c5552492063616e277420626520656d7074790000000000006044820152606401610964565b611748876117416102615490565b8888612b3a565b8351156117625761176261175c6102615490565b85612b46565b60408051600081526020810180835281519020916117829185910161474e565b60405160208183030381529060405280519060200120146117b0576117b06117aa6102615490565b83612dbd565b60408051600081526020810180835281519020916117d09184910161474e565b60405160208183030381529060405280519060200120146117fe576117fe6117f86102615490565b82612ddd565b611806612dfd565b7ff5c82eda717141c5f0cfeb894e7b7819c158a337b62ec13d412aecad30b0ad9e876118326102615490565b8589604051611844949392919061488c565b60405180910390a161185b61026180546001019055565b505060016101c3555050505050565b6118947f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336105d2565b6119065760405162461bcd60e51b815260206004820152603960248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f207061757365000000000000006064820152608401610964565b61133d612e9e565b60008281526097602052604081206119269083612f28565b9392505050565b61025a8054610a3a90614b32565b336001600160a01b03831614156119ba5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610964565b33600081815260ca602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600054610100900460ff1680611a3f575060005460ff16155b611aa25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610964565b600054610100900460ff16158015611ac4576000805461ffff19166101011790555b611acc612f34565b611ad4612f34565b611adc612f34565b611ae4612f34565b611aed82612fe6565b611af5612f34565b611afd6130a2565b611b05612f34565b611b0d61315f565b611b15613286565b611b3e7f94407210afedd72cdb4464e227401c7df8809575d2576d9f50e0d5cba8a92e55613389565b611b677fe42093a63818e0c931c15fda9036d0d8995a638e7acfabc8355a4789766e8de9613389565b8351611b7b90610259906020870190613ef6565b508251611b909061025a906020860190613ef6565b50611ba061026180546001019055565b8015611293576000805461ff001916905550505050565b606061025b6000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611c35576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611bed565b505050509050919050565b600081815261025b60209081526040808320805482518185028101850190935280835260609493849084015b82821015611cb4576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611c6c565b5050505090506000815167ffffffffffffffff811115611ce457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d0d578160200160208202803683370190505b50905060005b82518110156114ad57828181518110611d3c57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151828281518110611d6857634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611d7d81614bc0565b915050611d13565b600081815260976020526040812061099290613409565b6111bb8282613413565b611db16000336105d2565b611e235760405162461bcd60e51b815260206004820152602c60248201527f43616c6c6572206d75737420686176652061646d696e20726f6c6520746f207360448201527f6574206d696e74206665657300000000000000000000000000000000000000006064820152608401610964565b61026081905560408051338152602081018390527f7801094d3234fa70b910ee2d953591f831bb371292f4f1d114a9111f2391c8129101610c15565b600081815261025b60209081526040808320805482518185028101850190935280835260609493849084015b82821015611ed3576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611e8b565b5050505090506000815167ffffffffffffffff811115611f0357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611f2c578160200160208202803683370190505b50905060005b82518110156114ad57828181518110611f5b57634e487b7160e01b600052603260045260246000fd5b602002602001015160000151828281518110611f8757634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015280611fa981614bc0565b915050611f32565b6001600160a01b0384166120155760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610964565b6001600160a01b0385163314806120315750612031853361080f565b61208f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610964565b336120ae81878761209f88613439565b6120a888613439565b87612468565b600084815260c9602090815260408083206001600160a01b038a168452909152902054838110156121475760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610964565b6121518482614ad8565b600086815260c9602090815260408083206001600160a01b038c8116855292528083209390935588168152908120805486929061218f908490614aa1565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46121ef828888888888613492565b50505050505050565b6101f5546001600160a01b031633146122535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610964565b6001600160a01b0381166122cf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610964565b6101f5546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36101f5805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0383163314806123565750612356833361080f565b6123b45760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610964565b6111ac83838361359d565b600081815261025e60205260409020805460609190610aca90614b32565b60006123e882613722565b806109925750506001600160e01b0319166000908152610227602052604090205460ff1690565b80516124229060cb906020840190613ef6565b5050565b600061243233836108ea565b151592915050565b600081815261025d6020526040902054612455906001614aa1565b600091825261025d602052604090912055565b61118286868686868661372d565b6001600160a01b0384163b156111825760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906124ba90899089908890889088906004016147eb565b602060405180830381600087803b1580156124d457600080fd5b505af1925050508015612504575060408051601f3d908101601f1916820190925261250191810190614617565b60015b6125ba57612510614c07565b806308c379a0141561254a5750612525614c1f565b80612530575061254c565b8060405162461bcd60e51b81526004016109649190614a6a565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610964565b6001600160e01b0319811663bc197c8160e01b146121ef5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610964565b60008281526065602052604090206001015461264781336137a7565b6111ac8383613827565b6000611926836001600160a01b0384166138c9565b6001600160a01b03811633146126e45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610964565b6124228282613918565b6000611926836001600160a01b03841661399b565b6001600160a01b03841661277f5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610964565b336127908160008761209f88613439565b600084815260c9602090815260408083206001600160a01b0389168452909152812080548592906127c2908490614aa1565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461282281600087878787613492565b5050505050565b61012d5460ff1661287c5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610964565b61012d805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383166129295760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610964565b805182511461298b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610964565b60003390506129ae81856000868660405180602001604052806000815250612468565b60005b8351811015612adb5760008482815181106129dc57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110612a0857634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815260c9835260408082206001600160a01b038c168352909352919091205490915081811015612a955760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610964565b612a9f8282614ad8565b600093845260c9602090815260408086206001600160a01b038c1687529091529093209290925550819050612ad381614bc0565b9150506129b1565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612b2c929190614a3c565b60405180910390a450505050565b61129384848484612703565b60005b81518110156111ac5760006001600160a01b0316828281518110612b7d57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b03161415612be05760405162461bcd60e51b815260206004820152601b60248201527f526563697069656e742073686f756c642062652070726573656e7400000000006044820152606401610964565b6000828281518110612c0257634e487b7160e01b600052603260045260246000fd5b60200260200101516020015111612c815760405162461bcd60e51b815260206004820152602260248201527f526f79616c746965732076616c75652073686f756c6420626520706f7369746960448201527f76650000000000000000000000000000000000000000000000000000000000006064820152608401610964565b611388828281518110612ca457634e487b7160e01b600052603260045260246000fd5b6020026020010151602001511115612d245760405162461bcd60e51b815260206004820152602b60248201527f526f79616c746965732076616c75652073686f756c64206e6f74206265206d6f60448201527f7265207468616e203530250000000000000000000000000000000000000000006064820152608401610964565b600083815261025b602052604090208251839083908110612d5557634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518254600180820185556000948552938390208251600290920201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117815591015191015580612db581614bc0565b915050612b49565b600082815261025e6020908152604090912082516111ac92840190613ef6565b600082815261025c6020908152604090912082516111ac92840190613ef6565b6102605415612e7e57610260543414612e7e5760405162461bcd60e51b815260206004820152603260248201527f57726f6e6720666565732076616c75652073656e7420746f2047686f73744d6160448201527f726b657420666f72206d696e74206665657300000000000000000000000000006064820152608401610964565b341561133d573461025f6000828254612e979190614aa1565b9091555050565b61012d5460ff1615612ef25760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610964565b61012d805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586128aa3390565b60006119268383613ab2565b600054610100900460ff1680612f4d575060005460ff16155b612fb05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610964565b600054610100900460ff16158015612fd2576000805461ffff19166101011790555b8015610a29576000805461ff001916905550565b600054610100900460ff1680612fff575060005460ff16155b6130625760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610964565b600054610100900460ff16158015613084576000805461ffff19166101011790555b61308d8261240f565b8015612422576000805461ff00191690555050565b600054610100900460ff16806130bb575060005460ff16155b61311e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610964565b600054610100900460ff16158015613140576000805461ffff19166101011790555b61012d805460ff191690558015610a29576000805461ff001916905550565b600054610100900460ff1680613178575060005460ff16155b6131db5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610964565b600054610100900460ff161580156131fd576000805461ffff19166101011790555b613208600033613b61565b6132327f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633613b61565b61325c7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33613b61565b612fd27f8a9d57248f1015d5cac20111fe2512477434cf493627e5e959ca751e593d807933613b61565b600054610100900460ff168061329f575060005460ff16155b6133025760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610964565b600054610100900460ff16158015613324576000805461ffff19166101011790555b6101f5805473ffffffffffffffffffffffffffffffffffffffff19163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610a29576000805461ff001916905550565b6001600160e01b031980821614156133e35760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e74657266616365206964000000006044820152606401610964565b6001600160e01b031916600090815261022760205260409020805460ff19166001179055565b6000610992825490565b60008281526065602052604090206001015461342f81336137a7565b6111ac8383613918565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061348157634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156111825760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906134d69089908990889088908890600401614849565b602060405180830381600087803b1580156134f057600080fd5b505af1925050508015613520575060408051601f3d908101601f1916820190925261351d91810190614617565b60015b61352c57612510614c07565b6001600160e01b0319811663f23a6e6160e01b146121ef5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610964565b6001600160a01b0383166135ff5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610964565b3361362e8185600061361087613439565b61361987613439565b60405180602001604052806000815250612468565b600083815260c9602090815260408083206001600160a01b0388168452909152902054828110156136ad5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610964565b6136b78382614ad8565b600085815260c9602090815260408083206001600160a01b038a811680865291845282852095909555815189815292830188905292938616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b600061099282613b6b565b61012d5460ff16156111825760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201527f7768696c652070617573656400000000000000000000000000000000000000006064820152608401610964565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16612422576137e5816001600160a01b03166014613bdd565b6137f0836020613bdd565b60405160200161380192919061476a565b60408051601f198184030181529082905262461bcd60e51b825261096491600401614a6a565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166124225760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556138853390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205461391057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610992565b506000610992565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16156124225760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015613aa85760006139bf600183614ad8565b85549091506000906139d390600190614ad8565b905060008660000182815481106139fa57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110613a2b57634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260018901909152604090208490558654879080613a6c57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610992565b6000915050610992565b81546000908210613b2b5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60448201527f64730000000000000000000000000000000000000000000000000000000000006064820152608401610964565b826000018281548110613b4e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6111948282613e4c565b60006001600160e01b031982167fd9b67a26000000000000000000000000000000000000000000000000000000001480613bce57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b80610992575061099282613e56565b60606000613bec836002614ab9565b613bf7906002614aa1565b67ffffffffffffffff811115613c1d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613c47576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613c8c57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613cfd57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613d39846002614ab9565b613d44906001614aa1565b90505b6001811115613dfd577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613d9357634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110613db757634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93613df681614b1b565b9050613d47565b5083156119265760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610964565b6124228282613827565b60006001600160e01b031982167f5a05180f00000000000000000000000000000000000000000000000000000000148061099257506109928260006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061099257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610992565b828054613f0290614b32565b90600052602060002090601f016020900481019282613f245760008555613f6a565b82601f10613f3d57805160ff1916838001178555613f6a565b82800160010185558215613f6a579182015b82811115613f6a578251825591602001919060010190613f4f565b50613f76929150613f7a565b5090565b5b80821115613f765760008155600101613f7b565b8035613f9a81614ca9565b919050565b600082601f830112613faf578081fd5b81356020613fbc82614a7d565b60408051613fca8382614b93565b8481528381019250868401600686901b88018501891015613fe9578687fd5b865b868110156140335783828b031215614001578788fd5b835161400c81614b6d565b823561401781614ca9565b8152828701358782015285529385019390830190600101613feb565b509098975050505050505050565b600082601f830112614051578081fd5b8135602061405e82614a7d565b60405161406b8282614b93565b8381528281019150858301600585901b8701840188101561408a578586fd5b855b858110156140a85781358452928401929084019060010161408c565b5090979650505050505050565b600082601f8301126140c5578081fd5b813567ffffffffffffffff8111156140df576140df614bf1565b6040516140f6601f8301601f191660200182614b93565b81815284602083860101111561410a578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215614135578081fd5b813561192681614ca9565b60008060408385031215614152578081fd5b823561415d81614ca9565b9150602083013561416d81614ca9565b809150509250929050565b600080600080600060a0868803121561418f578081fd5b853561419a81614ca9565b945060208601356141aa81614ca9565b9350604086013567ffffffffffffffff808211156141c6578283fd5b6141d289838a01614041565b945060608801359150808211156141e7578283fd5b6141f389838a01614041565b93506080880135915080821115614208578283fd5b50614215888289016140b5565b9150509295509295909350565b600080600080600060a08688031215614239578081fd5b853561424481614ca9565b9450602086013561425481614ca9565b93506040860135925060608601359150608086013567ffffffffffffffff81111561427d578182fd5b614215888289016140b5565b60008060006060848603121561429d578081fd5b83356142a881614ca9565b9250602084013567ffffffffffffffff808211156142c4578283fd5b6142d087838801614041565b935060408601359150808211156142e5578283fd5b506142f286828701614041565b9150509250925092565b6000806040838503121561430e578182fd5b823561431981614ca9565b91506020830135801515811461416d578182fd5b6000806040838503121561433f578182fd5b823561434a81614ca9565b946020939093013593505050565b600080600080600080600060e0888a031215614372578485fd5b61437b88613f8f565b965060208801359550604088013567ffffffffffffffff8082111561439e578687fd5b6143aa8b838c016140b5565b965060608a01359150808211156143bf578384fd5b6143cb8b838c01613f9f565b955060808a01359150808211156143e0578384fd5b6143ec8b838c016140b5565b945060a08a0135915080821115614401578384fd5b61440d8b838c016140b5565b935060c08a0135915080821115614422578283fd5b5061442f8a828b016140b5565b91505092959891949750929550565b60008060008060808587031215614453578182fd5b843561445e81614ca9565b935060208501359250604085013567ffffffffffffffff811115614480578283fd5b61448c878288016140b5565b949793965093946060013593505050565b6000806000606084860312156144b1578081fd5b83356144bc81614ca9565b95602085013595506040909401359392505050565b600080604083850312156144e3578182fd5b823567ffffffffffffffff808211156144fa578384fd5b818501915085601f83011261450d578384fd5b8135602061451a82614a7d565b6040516145278282614b93565b8381528281019150858301600585901b870184018b1015614546578889fd5b8896505b8487101561457157803561455d81614ca9565b83526001969096019591830191830161454a565b5096505086013592505080821115614587578283fd5b5061459485828601614041565b9150509250929050565b6000602082840312156145af578081fd5b5035919050565b600080604083850312156145c8578182fd5b82359150602083013561416d81614ca9565b600080604083850312156145ec578182fd5b50508035926020909101359150565b60006020828403121561460c578081fd5b813561192681614cbe565b600060208284031215614628578081fd5b815161192681614cbe565b600060208284031215614644578081fd5b813567ffffffffffffffff81111561465a578182fd5b614666848285016140b5565b949350505050565b600080600060608486031215614682578081fd5b833567ffffffffffffffff80821115614699578283fd5b6146a5878388016140b5565b945060208601359150808211156146ba578283fd5b6146c6878388016140b5565b935060408601359150808211156146db578283fd5b506142f2868287016140b5565b6000815180845260208085019450808401835b83811015614717578151875295820195908201906001016146fb565b509495945050505050565b6000815180845261473a816020860160208601614aef565b601f01601f19169290920160200192915050565b60008251614760818460208701614aef565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516147a2816017850160208801614aef565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516147df816028840160208801614aef565b01602801949350505050565b60006001600160a01b03808816835280871660208401525060a0604083015261481760a08301866146e8565b828103606084015261482981866146e8565b9050828103608084015261483d8185614722565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261488160a0830184614722565b979650505050505050565b6001600160a01b03851681528360208201526080604082015260006148b46080830185614722565b905082606083015295945050505050565b6001600160a01b03841681526000602084818401526060604084015281845483600182811c9150808316806148fb57607f831692505b85831081141561491957634e487b7160e01b87526022600452602487fd5b6060880183905260808801818015614938576001811461494957614973565b60ff19861682528782019650614973565b60008b815260209020895b8681101561496d57815484820152908501908901614954565b83019750505b50949b9a5050505050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156149c55783516001600160a01b0316835292840192918401916001016149a0565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015614a1c57815180516001600160a01b031685528601518685015292840192908501906001016149ee565b5091979650505050505050565b60208152600061192660208301846146e8565b604081526000614a4f60408301856146e8565b8281036020840152614a6181856146e8565b95945050505050565b6020815260006119266020830184614722565b600067ffffffffffffffff821115614a9757614a97614bf1565b5060051b60200190565b60008219821115614ab457614ab4614bdb565b500190565b6000816000190483118215151615614ad357614ad3614bdb565b500290565b600082821015614aea57614aea614bdb565b500390565b60005b83811015614b0a578181015183820152602001614af2565b838111156112935750506000910152565b600081614b2a57614b2a614bdb565b506000190190565b600181811c90821680614b4657607f821691505b60208210811415614b6757634e487b7160e01b600052602260045260246000fd5b50919050565b6040810181811067ffffffffffffffff82111715614b8d57614b8d614bf1565b60405250565b601f8201601f1916810167ffffffffffffffff81118282101715614bb957614bb9614bf1565b6040525050565b6000600019821415614bd457614bd4614bdb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115614c1c57600481823e5160e01c5b90565b600060443d1015614c2d5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715614c5d57505050505090565b8285019150815181811115614c755750505050505090565b843d8701016020828501011115614c8f5750505050505090565b614c9e60208286010187614b93565b509095945050505050565b6001600160a01b0381168114610a2957600080fd5b6001600160e01b031981168114610a2957600080fdfea264697066735822122089e0cd8536ce91d3b63985847f68cdc33760e7810bca66cc8578d8c3fd2a2f8764736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102db5760003560e01c80639010d07c11610184578063d5391393116100d6578063e985e9c51161008a578063f2fde38b11610064578063f2fde38b1461088a578063f5298aca146108aa578063f7d027de146108ca57600080fd5b8063e985e9c5146107f4578063edcbc0bd1461083d578063f242432a1461086a57600080fd5b8063dac0f3d9116100bb578063dac0f3d91461078a578063e24dbeae146107aa578063e63ab1e9146107c057600080fd5b8063d539139314610736578063d547741f1461076a57600080fd5b8063a22cb46511610138578063c1793c5811610112578063c1793c58146106c8578063c6f4f0f0146106e8578063ca15c8731461071657600080fd5b8063a22cb4651461065b578063a6487c531461067b578063bb3bafd61461069b57600080fd5b806395d89b411161016957806395d89b41146105fd5780639ceea66514610612578063a217fddf1461064657600080fd5b80639010d07c1461059757806391d14854146105b757600080fd5b806336568abe1161023d5780636b20c454116101f157806383fa237b116101cb57806383fa237b1461053c5780638456cb591461054f5780638da5cb5b1461056457600080fd5b80636b20c454146104f2578063715018a61461051257806373448c461461052757600080fd5b80633f4ba83a116102225780633f4ba83a146104975780634e1273f4146104ac5780635c975abb146104d957600080fd5b806336568abe1461045757806336edac961461047757600080fd5b80631c7e78f3116102945780632e1a7d4d116102795780632e1a7d4d146103f75780632eb2c2d6146104175780632f2ff15d1461043757600080fd5b80631c7e78f3146103a7578063248a9ca3146103c757600080fd5b806302fe5305116102c557806302fe53051461034357806306fdde03146103655780630e89341c1461038757600080fd5b8062fdd58e146102e057806301ffc9a714610313575b600080fd5b3480156102ec57600080fd5b506103006102fb36600461432d565b6108ea565b6040519081526020015b60405180910390f35b34801561031f57600080fd5b5061033361032e3660046145fb565b610998565b604051901515815260200161030a565b34801561034f57600080fd5b5061036361035e366004614633565b6109a3565b005b34801561037157600080fd5b5061037a610a2c565b60405161030a9190614a6a565b34801561039357600080fd5b5061037a6103a236600461459e565b610abb565b3480156103b357600080fd5b506103636103c236600461459e565b610b4f565b3480156103d357600080fd5b506103006103e236600461459e565b60009081526065602052604090206001015490565b34801561040357600080fd5b5061036361041236600461459e565b610c20565b34801561042357600080fd5b50610363610432366004614178565b610e13565b34801561044357600080fd5b506103636104523660046145b6565b61118a565b34801561046357600080fd5b506103636104723660046145b6565b6111b1565b34801561048357600080fd5b5061036361049236600461443e565b6111d3565b3480156104a357600080fd5b50610363611299565b3480156104b857600080fd5b506104cc6104c73660046144d1565b61133f565b60405161030a9190614a29565b3480156104e557600080fd5b5061012d5460ff16610333565b3480156104fe57600080fd5b5061036361050d366004614289565b6114b5565b34801561051e57600080fd5b5061036361153a565b34801561053357600080fd5b506103006115ee565b61036361054a366004614358565b6115ff565b34801561055b57600080fd5b5061036361186a565b34801561057057600080fd5b506101f5546001600160a01b03165b6040516001600160a01b03909116815260200161030a565b3480156105a357600080fd5b5061057f6105b23660046145da565b61190e565b3480156105c357600080fd5b506103336105d23660046145b6565b60009182526065602090815260408084206001600160a01b0393909316845291905290205460ff1690565b34801561060957600080fd5b5061037a61192d565b34801561061e57600080fd5b506103007f8a9d57248f1015d5cac20111fe2512477434cf493627e5e959ca751e593d807981565b34801561065257600080fd5b50610300600081565b34801561066757600080fd5b506103636106763660046142fc565b61193b565b34801561068757600080fd5b5061036361069636600461466e565b611a26565b3480156106a757600080fd5b506106bb6106b636600461459e565b611bb7565b60405161030a91906149d1565b3480156106d457600080fd5b506104cc6106e336600461459e565b611c40565b3480156106f457600080fd5b5061030061070336600461459e565b600090815261025d602052604090205490565b34801561072257600080fd5b5061030061073136600461459e565b611d85565b34801561074257600080fd5b506103007f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a681565b34801561077657600080fd5b506103636107853660046145b6565b611d9c565b34801561079657600080fd5b506103636107a536600461459e565b611da6565b3480156107b657600080fd5b5061026054610300565b3480156107cc57600080fd5b506103007f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b34801561080057600080fd5b5061033361080f366004614140565b6001600160a01b03918216600090815260ca6020908152604080832093909416825291909152205460ff1690565b34801561084957600080fd5b5061085d61085836600461459e565b611e5f565b60405161030a9190614984565b34801561087657600080fd5b50610363610885366004614222565b611fb1565b34801561089657600080fd5b506103636108a5366004614124565b6121f8565b3480156108b657600080fd5b506103636108c536600461449d565b61233a565b3480156108d657600080fd5b5061037a6108e536600461459e565b6123bf565b60006001600160a01b03831661096d5760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b50600081815260c9602090815260408083206001600160a01b03861684529091529020545b92915050565b6000610992826123dd565b6109ae6000336105d2565b610a205760405162461bcd60e51b815260206004820152603e60248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652061646d696e20726f6c6520746f20736574206e65772075726900006064820152608401610964565b610a298161240f565b50565b6102598054610a3a90614b32565b80601f0160208091040260200160405190810160405280929190818152602001828054610a6690614b32565b8015610ab35780601f10610a8857610100808354040283529160200191610ab3565b820191906000526020600020905b815481529060010190602001808311610a9657829003601f168201915b505050505081565b606060cb8054610aca90614b32565b80601f0160208091040260200160405190810160405280929190818152602001828054610af690614b32565b8015610b435780601f10610b1857610100808354040283529160200191610b43565b820191906000526020600020905b815481529060010190602001808311610b2657829003601f168201915b50505050509050919050565b610b5881612426565b610bca5760405162461bcd60e51b815260206004820152602360248201527f43616c6c6572206d75737420626520746865206f776e6572206f66207468652060448201527f4e465400000000000000000000000000000000000000000000000000000000006064820152608401610964565b610bd38161243a565b600081815261025c60205260409081902090517f544b1d1249133c50ce89743ed1ca34a815bd50d42b71e6d331a1ac560013a8ec91610c1591339185916148c5565b60405180910390a150565b6101f5546001600160a01b03163314610c7b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610964565b600081118015610c8e575061025f548111155b610d265760405162461bcd60e51b815260206004820152604760248201527f576974686472617720616d6f756e742073686f756c642062652067726561746560448201527f72207468656e203020616e64206c657373207468656e20636f6e74726163742060648201527f62616c616e636500000000000000000000000000000000000000000000000000608482015260a401610964565b8061025f6000828254610d399190614ad8565b9091555050604051600090339083908381818185875af1925050503d8060008114610d80576040519150601f19603f3d011682016040523d82523d6000602084013e610d85565b606091505b5050905080610dd65760405162461bcd60e51b815260206004820152601060248201527f5472616e73666572206661696c65642e000000000000000000000000000000006044820152606401610964565b60408051338152602081018490527f3c897fa64265e543b9d36df079688f87240185d1bf1a937e4c45a56e11678736910160405180910390a15050565b8151835114610e755760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610964565b6001600160a01b038416610ed95760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610964565b6001600160a01b038516331480610ef55750610ef5853361080f565b610f675760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f76656400000000000000000000000000006064820152608401610964565b33610f76818787878787612468565b60005b845181101561111c576000858281518110610fa457634e487b7160e01b600052603260045260246000fd5b602002602001015190506000858381518110610fd057634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815260c9835260408082206001600160a01b038e1683529093529190912054909150818110156110775760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610964565b6110818282614ad8565b60c9600085815260200190815260200160002060008c6001600160a01b03166001600160a01b03168152602001908152602001600020819055508160c9600085815260200190815260200160002060008b6001600160a01b03166001600160a01b0316815260200190815260200160002060008282546111019190614aa1565b925050819055505050508061111590614bc0565b9050610f79565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb878760405161116c929190614a3c565b60405180910390a4611182818787878787612476565b505050505050565b611194828261262b565b60008281526097602052604090206111ac9082612651565b505050565b6111bb8282612666565b60008281526097602052604090206111ac90826126ee565b6111fd7f8a9d57248f1015d5cac20111fe2512477434cf493627e5e959ca751e593d8079336105d2565b61126f5760405162461bcd60e51b815260206004820152603460248201527f6d696e74576974685552493a206d757374206861766520504f4c594e4554574f60448201527f524b5f524f4c4520726f6c6520746f206d696e740000000000000000000000006064820152608401610964565b61128a84848360405180602001604052806000815250612703565b6112938261240f565b50505050565b6112c37f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336105d2565b6113355760405162461bcd60e51b815260206004820152603b60248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f20756e706175736500000000006064820152608401610964565b61133d612829565b565b606081518351146113b85760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d6174636800000000000000000000000000000000000000000000006064820152608401610964565b6000835167ffffffffffffffff8111156113e257634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561140b578160200160208202803683370190505b50905060005b84518110156114ad5761147285828151811061143d57634e487b7160e01b600052603260045260246000fd5b602002602001015185838151811061146557634e487b7160e01b600052603260045260246000fd5b60200260200101516108ea565b82828151811061149257634e487b7160e01b600052603260045260246000fd5b60209081029190910101526114a681614bc0565b9050611411565b509392505050565b6001600160a01b0383163314806114d157506114d1833361080f565b61152f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610964565b6111ac8383836128c7565b6101f5546001600160a01b031633146115955760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610964565b6101f5546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a36101f5805473ffffffffffffffffffffffffffffffffffffffff19169055565b60006115fa6102615490565b905090565b60026101c35414156116535760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610964565b60026101c3556001600160a01b0387166116af5760405162461bcd60e51b815260206004820152601160248201527f746f2063616e277420626520656d7074790000000000000000000000000000006044820152606401610964565b60408051600081526020810180835281519020916116cf9186910161474e565b6040516020818303038152906040528051906020012014156117335760405162461bcd60e51b815260206004820152601a60248201527f65787465726e616c5552492063616e277420626520656d7074790000000000006044820152606401610964565b611748876117416102615490565b8888612b3a565b8351156117625761176261175c6102615490565b85612b46565b60408051600081526020810180835281519020916117829185910161474e565b60405160208183030381529060405280519060200120146117b0576117b06117aa6102615490565b83612dbd565b60408051600081526020810180835281519020916117d09184910161474e565b60405160208183030381529060405280519060200120146117fe576117fe6117f86102615490565b82612ddd565b611806612dfd565b7ff5c82eda717141c5f0cfeb894e7b7819c158a337b62ec13d412aecad30b0ad9e876118326102615490565b8589604051611844949392919061488c565b60405180910390a161185b61026180546001019055565b505060016101c3555050505050565b6118947f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a336105d2565b6119065760405162461bcd60e51b815260206004820152603960248201527f455243313135355072657365744d696e7465725061757365723a206d7573742060448201527f686176652070617573657220726f6c6520746f207061757365000000000000006064820152608401610964565b61133d612e9e565b60008281526097602052604081206119269083612f28565b9392505050565b61025a8054610a3a90614b32565b336001600160a01b03831614156119ba5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c6600000000000000000000000000000000000000000000006064820152608401610964565b33600081815260ca602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b600054610100900460ff1680611a3f575060005460ff16155b611aa25760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610964565b600054610100900460ff16158015611ac4576000805461ffff19166101011790555b611acc612f34565b611ad4612f34565b611adc612f34565b611ae4612f34565b611aed82612fe6565b611af5612f34565b611afd6130a2565b611b05612f34565b611b0d61315f565b611b15613286565b611b3e7f94407210afedd72cdb4464e227401c7df8809575d2576d9f50e0d5cba8a92e55613389565b611b677fe42093a63818e0c931c15fda9036d0d8995a638e7acfabc8355a4789766e8de9613389565b8351611b7b90610259906020870190613ef6565b508251611b909061025a906020860190613ef6565b50611ba061026180546001019055565b8015611293576000805461ff001916905550505050565b606061025b6000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b82821015611c35576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611bed565b505050509050919050565b600081815261025b60209081526040808320805482518185028101850190935280835260609493849084015b82821015611cb4576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611c6c565b5050505090506000815167ffffffffffffffff811115611ce457634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611d0d578160200160208202803683370190505b50905060005b82518110156114ad57828181518110611d3c57634e487b7160e01b600052603260045260246000fd5b602002602001015160200151828281518110611d6857634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611d7d81614bc0565b915050611d13565b600081815260976020526040812061099290613409565b6111bb8282613413565b611db16000336105d2565b611e235760405162461bcd60e51b815260206004820152602c60248201527f43616c6c6572206d75737420686176652061646d696e20726f6c6520746f207360448201527f6574206d696e74206665657300000000000000000000000000000000000000006064820152608401610964565b61026081905560408051338152602081018390527f7801094d3234fa70b910ee2d953591f831bb371292f4f1d114a9111f2391c8129101610c15565b600081815261025b60209081526040808320805482518185028101850190935280835260609493849084015b82821015611ed3576000848152602090819020604080518082019091526002850290910180546001600160a01b03168252600190810154828401529083529092019101611e8b565b5050505090506000815167ffffffffffffffff811115611f0357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611f2c578160200160208202803683370190505b50905060005b82518110156114ad57828181518110611f5b57634e487b7160e01b600052603260045260246000fd5b602002602001015160000151828281518110611f8757634e487b7160e01b600052603260045260246000fd5b6001600160a01b039092166020928302919091019091015280611fa981614bc0565b915050611f32565b6001600160a01b0384166120155760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b6064820152608401610964565b6001600160a01b0385163314806120315750612031853361080f565b61208f5760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610964565b336120ae81878761209f88613439565b6120a888613439565b87612468565b600084815260c9602090815260408083206001600160a01b038a168452909152902054838110156121475760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201527f72207472616e73666572000000000000000000000000000000000000000000006064820152608401610964565b6121518482614ad8565b600086815260c9602090815260408083206001600160a01b038c8116855292528083209390935588168152908120805486929061218f908490614aa1565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46121ef828888888888613492565b50505050505050565b6101f5546001600160a01b031633146122535760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610964565b6001600160a01b0381166122cf5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610964565b6101f5546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36101f5805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0383163314806123565750612356833361080f565b6123b45760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201526808185c1c1c9bdd995960ba1b6064820152608401610964565b6111ac83838361359d565b600081815261025e60205260409020805460609190610aca90614b32565b60006123e882613722565b806109925750506001600160e01b0319166000908152610227602052604090205460ff1690565b80516124229060cb906020840190613ef6565b5050565b600061243233836108ea565b151592915050565b600081815261025d6020526040902054612455906001614aa1565b600091825261025d602052604090912055565b61118286868686868661372d565b6001600160a01b0384163b156111825760405163bc197c8160e01b81526001600160a01b0385169063bc197c81906124ba90899089908890889088906004016147eb565b602060405180830381600087803b1580156124d457600080fd5b505af1925050508015612504575060408051601f3d908101601f1916820190925261250191810190614617565b60015b6125ba57612510614c07565b806308c379a0141561254a5750612525614c1f565b80612530575061254c565b8060405162461bcd60e51b81526004016109649190614a6a565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e7465720000000000000000000000006064820152608401610964565b6001600160e01b0319811663bc197c8160e01b146121ef5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610964565b60008281526065602052604090206001015461264781336137a7565b6111ac8383613827565b6000611926836001600160a01b0384166138c9565b6001600160a01b03811633146126e45760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c6600000000000000000000000000000000006064820152608401610964565b6124228282613918565b6000611926836001600160a01b03841661399b565b6001600160a01b03841661277f5760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f2061646472657360448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610964565b336127908160008761209f88613439565b600084815260c9602090815260408083206001600160a01b0389168452909152812080548592906127c2908490614aa1565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a461282281600087878787613492565b5050505050565b61012d5460ff1661287c5760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610964565b61012d805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b0383166129295760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610964565b805182511461298b5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b6064820152608401610964565b60003390506129ae81856000868660405180602001604052806000815250612468565b60005b8351811015612adb5760008482815181106129dc57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000848381518110612a0857634e487b7160e01b600052603260045260246000fd5b602090810291909101810151600084815260c9835260408082206001600160a01b038c168352909352919091205490915081811015612a955760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610964565b612a9f8282614ad8565b600093845260c9602090815260408086206001600160a01b038c1687529091529093209290925550819050612ad381614bc0565b9150506129b1565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051612b2c929190614a3c565b60405180910390a450505050565b61129384848484612703565b60005b81518110156111ac5760006001600160a01b0316828281518110612b7d57634e487b7160e01b600052603260045260246000fd5b6020026020010151600001516001600160a01b03161415612be05760405162461bcd60e51b815260206004820152601b60248201527f526563697069656e742073686f756c642062652070726573656e7400000000006044820152606401610964565b6000828281518110612c0257634e487b7160e01b600052603260045260246000fd5b60200260200101516020015111612c815760405162461bcd60e51b815260206004820152602260248201527f526f79616c746965732076616c75652073686f756c6420626520706f7369746960448201527f76650000000000000000000000000000000000000000000000000000000000006064820152608401610964565b611388828281518110612ca457634e487b7160e01b600052603260045260246000fd5b6020026020010151602001511115612d245760405162461bcd60e51b815260206004820152602b60248201527f526f79616c746965732076616c75652073686f756c64206e6f74206265206d6f60448201527f7265207468616e203530250000000000000000000000000000000000000000006064820152608401610964565b600083815261025b602052604090208251839083908110612d5557634e487b7160e01b600052603260045260246000fd5b6020908102919091018101518254600180820185556000948552938390208251600290920201805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0390921691909117815591015191015580612db581614bc0565b915050612b49565b600082815261025e6020908152604090912082516111ac92840190613ef6565b600082815261025c6020908152604090912082516111ac92840190613ef6565b6102605415612e7e57610260543414612e7e5760405162461bcd60e51b815260206004820152603260248201527f57726f6e6720666565732076616c75652073656e7420746f2047686f73744d6160448201527f726b657420666f72206d696e74206665657300000000000000000000000000006064820152608401610964565b341561133d573461025f6000828254612e979190614aa1565b9091555050565b61012d5460ff1615612ef25760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610964565b61012d805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586128aa3390565b60006119268383613ab2565b600054610100900460ff1680612f4d575060005460ff16155b612fb05760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610964565b600054610100900460ff16158015612fd2576000805461ffff19166101011790555b8015610a29576000805461ff001916905550565b600054610100900460ff1680612fff575060005460ff16155b6130625760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610964565b600054610100900460ff16158015613084576000805461ffff19166101011790555b61308d8261240f565b8015612422576000805461ff00191690555050565b600054610100900460ff16806130bb575060005460ff16155b61311e5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610964565b600054610100900460ff16158015613140576000805461ffff19166101011790555b61012d805460ff191690558015610a29576000805461ff001916905550565b600054610100900460ff1680613178575060005460ff16155b6131db5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610964565b600054610100900460ff161580156131fd576000805461ffff19166101011790555b613208600033613b61565b6132327f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a633613b61565b61325c7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a33613b61565b612fd27f8a9d57248f1015d5cac20111fe2512477434cf493627e5e959ca751e593d807933613b61565b600054610100900460ff168061329f575060005460ff16155b6133025760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610964565b600054610100900460ff16158015613324576000805461ffff19166101011790555b6101f5805473ffffffffffffffffffffffffffffffffffffffff19163390811790915560405181906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610a29576000805461ff001916905550565b6001600160e01b031980821614156133e35760405162461bcd60e51b815260206004820152601c60248201527f4552433136353a20696e76616c696420696e74657266616365206964000000006044820152606401610964565b6001600160e01b031916600090815261022760205260409020805460ff19166001179055565b6000610992825490565b60008281526065602052604090206001015461342f81336137a7565b6111ac8383613918565b6040805160018082528183019092526060916000919060208083019080368337019050509050828160008151811061348157634e487b7160e01b600052603260045260246000fd5b602090810291909101015292915050565b6001600160a01b0384163b156111825760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e61906134d69089908990889088908890600401614849565b602060405180830381600087803b1580156134f057600080fd5b505af1925050508015613520575060408051601f3d908101601f1916820190925261351d91810190614617565b60015b61352c57612510614c07565b6001600160e01b0319811663f23a6e6160e01b146121ef5760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b6064820152608401610964565b6001600160a01b0383166135ff5760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b6064820152608401610964565b3361362e8185600061361087613439565b61361987613439565b60405180602001604052806000815250612468565b600083815260c9602090815260408083206001600160a01b0388168452909152902054828110156136ad5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b6064820152608401610964565b6136b78382614ad8565b600085815260c9602090815260408083206001600160a01b038a811680865291845282852095909555815189815292830188905292938616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b600061099282613b6b565b61012d5460ff16156111825760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201527f7768696c652070617573656400000000000000000000000000000000000000006064820152608401610964565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16612422576137e5816001600160a01b03166014613bdd565b6137f0836020613bdd565b60405160200161380192919061476a565b60408051601f198184030181529082905262461bcd60e51b825261096491600401614a6a565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff166124225760008281526065602090815260408083206001600160a01b03851684529091529020805460ff191660011790556138853390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600081815260018301602052604081205461391057508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610992565b506000610992565b60008281526065602090815260408083206001600160a01b038516845290915290205460ff16156124225760008281526065602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b60008181526001830160205260408120548015613aa85760006139bf600183614ad8565b85549091506000906139d390600190614ad8565b905060008660000182815481106139fa57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080876000018481548110613a2b57634e487b7160e01b600052603260045260246000fd5b600091825260208083209091019290925582815260018901909152604090208490558654879080613a6c57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610992565b6000915050610992565b81546000908210613b2b5760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60448201527f64730000000000000000000000000000000000000000000000000000000000006064820152608401610964565b826000018281548110613b4e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6111948282613e4c565b60006001600160e01b031982167fd9b67a26000000000000000000000000000000000000000000000000000000001480613bce57506001600160e01b031982167f0e89341c00000000000000000000000000000000000000000000000000000000145b80610992575061099282613e56565b60606000613bec836002614ab9565b613bf7906002614aa1565b67ffffffffffffffff811115613c1d57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015613c47576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110613c8c57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110613cfd57634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000613d39846002614ab9565b613d44906001614aa1565b90505b6001811115613dfd577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110613d9357634e487b7160e01b600052603260045260246000fd5b1a60f81b828281518110613db757634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93613df681614b1b565b9050613d47565b5083156119265760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610964565b6124228282613827565b60006001600160e01b031982167f5a05180f00000000000000000000000000000000000000000000000000000000148061099257506109928260006001600160e01b031982167f7965db0b00000000000000000000000000000000000000000000000000000000148061099257507f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614610992565b828054613f0290614b32565b90600052602060002090601f016020900481019282613f245760008555613f6a565b82601f10613f3d57805160ff1916838001178555613f6a565b82800160010185558215613f6a579182015b82811115613f6a578251825591602001919060010190613f4f565b50613f76929150613f7a565b5090565b5b80821115613f765760008155600101613f7b565b8035613f9a81614ca9565b919050565b600082601f830112613faf578081fd5b81356020613fbc82614a7d565b60408051613fca8382614b93565b8481528381019250868401600686901b88018501891015613fe9578687fd5b865b868110156140335783828b031215614001578788fd5b835161400c81614b6d565b823561401781614ca9565b8152828701358782015285529385019390830190600101613feb565b509098975050505050505050565b600082601f830112614051578081fd5b8135602061405e82614a7d565b60405161406b8282614b93565b8381528281019150858301600585901b8701840188101561408a578586fd5b855b858110156140a85781358452928401929084019060010161408c565b5090979650505050505050565b600082601f8301126140c5578081fd5b813567ffffffffffffffff8111156140df576140df614bf1565b6040516140f6601f8301601f191660200182614b93565b81815284602083860101111561410a578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215614135578081fd5b813561192681614ca9565b60008060408385031215614152578081fd5b823561415d81614ca9565b9150602083013561416d81614ca9565b809150509250929050565b600080600080600060a0868803121561418f578081fd5b853561419a81614ca9565b945060208601356141aa81614ca9565b9350604086013567ffffffffffffffff808211156141c6578283fd5b6141d289838a01614041565b945060608801359150808211156141e7578283fd5b6141f389838a01614041565b93506080880135915080821115614208578283fd5b50614215888289016140b5565b9150509295509295909350565b600080600080600060a08688031215614239578081fd5b853561424481614ca9565b9450602086013561425481614ca9565b93506040860135925060608601359150608086013567ffffffffffffffff81111561427d578182fd5b614215888289016140b5565b60008060006060848603121561429d578081fd5b83356142a881614ca9565b9250602084013567ffffffffffffffff808211156142c4578283fd5b6142d087838801614041565b935060408601359150808211156142e5578283fd5b506142f286828701614041565b9150509250925092565b6000806040838503121561430e578182fd5b823561431981614ca9565b91506020830135801515811461416d578182fd5b6000806040838503121561433f578182fd5b823561434a81614ca9565b946020939093013593505050565b600080600080600080600060e0888a031215614372578485fd5b61437b88613f8f565b965060208801359550604088013567ffffffffffffffff8082111561439e578687fd5b6143aa8b838c016140b5565b965060608a01359150808211156143bf578384fd5b6143cb8b838c01613f9f565b955060808a01359150808211156143e0578384fd5b6143ec8b838c016140b5565b945060a08a0135915080821115614401578384fd5b61440d8b838c016140b5565b935060c08a0135915080821115614422578283fd5b5061442f8a828b016140b5565b91505092959891949750929550565b60008060008060808587031215614453578182fd5b843561445e81614ca9565b935060208501359250604085013567ffffffffffffffff811115614480578283fd5b61448c878288016140b5565b949793965093946060013593505050565b6000806000606084860312156144b1578081fd5b83356144bc81614ca9565b95602085013595506040909401359392505050565b600080604083850312156144e3578182fd5b823567ffffffffffffffff808211156144fa578384fd5b818501915085601f83011261450d578384fd5b8135602061451a82614a7d565b6040516145278282614b93565b8381528281019150858301600585901b870184018b1015614546578889fd5b8896505b8487101561457157803561455d81614ca9565b83526001969096019591830191830161454a565b5096505086013592505080821115614587578283fd5b5061459485828601614041565b9150509250929050565b6000602082840312156145af578081fd5b5035919050565b600080604083850312156145c8578182fd5b82359150602083013561416d81614ca9565b600080604083850312156145ec578182fd5b50508035926020909101359150565b60006020828403121561460c578081fd5b813561192681614cbe565b600060208284031215614628578081fd5b815161192681614cbe565b600060208284031215614644578081fd5b813567ffffffffffffffff81111561465a578182fd5b614666848285016140b5565b949350505050565b600080600060608486031215614682578081fd5b833567ffffffffffffffff80821115614699578283fd5b6146a5878388016140b5565b945060208601359150808211156146ba578283fd5b6146c6878388016140b5565b935060408601359150808211156146db578283fd5b506142f2868287016140b5565b6000815180845260208085019450808401835b83811015614717578151875295820195908201906001016146fb565b509495945050505050565b6000815180845261473a816020860160208601614aef565b601f01601f19169290920160200192915050565b60008251614760818460208701614aef565b9190910192915050565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516147a2816017850160208801614aef565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516147df816028840160208801614aef565b01602801949350505050565b60006001600160a01b03808816835280871660208401525060a0604083015261481760a08301866146e8565b828103606084015261482981866146e8565b9050828103608084015261483d8185614722565b98975050505050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a0608083015261488160a0830184614722565b979650505050505050565b6001600160a01b03851681528360208201526080604082015260006148b46080830185614722565b905082606083015295945050505050565b6001600160a01b03841681526000602084818401526060604084015281845483600182811c9150808316806148fb57607f831692505b85831081141561491957634e487b7160e01b87526022600452602487fd5b6060880183905260808801818015614938576001811461494957614973565b60ff19861682528782019650614973565b60008b815260209020895b8681101561496d57815484820152908501908901614954565b83019750505b50949b9a5050505050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156149c55783516001600160a01b0316835292840192918401916001016149a0565b50909695505050505050565b602080825282518282018190526000919060409081850190868401855b82811015614a1c57815180516001600160a01b031685528601518685015292840192908501906001016149ee565b5091979650505050505050565b60208152600061192660208301846146e8565b604081526000614a4f60408301856146e8565b8281036020840152614a6181856146e8565b95945050505050565b6020815260006119266020830184614722565b600067ffffffffffffffff821115614a9757614a97614bf1565b5060051b60200190565b60008219821115614ab457614ab4614bdb565b500190565b6000816000190483118215151615614ad357614ad3614bdb565b500290565b600082821015614aea57614aea614bdb565b500390565b60005b83811015614b0a578181015183820152602001614af2565b838111156112935750506000910152565b600081614b2a57614b2a614bdb565b506000190190565b600181811c90821680614b4657607f821691505b60208210811415614b6757634e487b7160e01b600052602260045260246000fd5b50919050565b6040810181811067ffffffffffffffff82111715614b8d57614b8d614bf1565b60405250565b601f8201601f1916810167ffffffffffffffff81118282101715614bb957614bb9614bf1565b6040525050565b6000600019821415614bd457614bd4614bdb565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b600060033d1115614c1c57600481823e5160e01c5b90565b600060443d1015614c2d5790565b6040516003193d81016004833e81513d67ffffffffffffffff8160248401118184111715614c5d57505050505090565b8285019150815181811115614c755750505050505090565b843d8701016020828501011115614c8f5750505050505090565b614c9e60208286010187614b93565b509095945050505050565b6001600160a01b0381168114610a2957600080fd5b6001600160e01b031981168114610a2957600080fdfea264697066735822122089e0cd8536ce91d3b63985847f68cdc33760e7810bca66cc8578d8c3fd2a2f8764736f6c63430008040033",
  "devdoc": {
    "details": "ERC1155 token with minting, burning, pause, royalties & lock content functions.",
    "kind": "dev",
    "methods": {
      "balanceOf(address,uint256)": {
        "details": "See {IERC1155-balanceOf}. Requirements: - `account` cannot be the zero address."
      },
      "balanceOfBatch(address[],uint256[])": {
        "details": "See {IERC1155-balanceOfBatch}. Requirements: - `accounts` and `ids` must have the same length."
      },
      "getCurrentCounter()": {
        "details": "current _tokenIdTracker"
      },
      "getCurrentLockedContentViewTracker(uint256)": {
        "details": "get a NFT current locked content view tracker"
      },
      "getGhostmarketMintFees()": {
        "returns": {
          "_0": "get Ghostmarket mint fees"
        }
      },
      "getLockedContent(uint256)": {
        "details": "get locked content for a NFT emits LockedContentViewed event"
      },
      "getMetadataJson(uint256)": {
        "details": "get a NFT custom attributes"
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "getRoyalties(uint256)": {
        "details": "get royalties array"
      },
      "getRoyaltiesBps(uint256)": {
        "details": "get a NFT royalties fees fee basis points 10000 = 100%"
      },
      "getRoyaltiesRecipients(uint256)": {
        "details": "get a NFT royalties recipients"
      },
      "grantRole(bytes32,address)": {
        "details": "Overload {grantRole} to track enumerable memberships"
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC1155-isApprovedForAll}."
      },
      "mintGhost(address,uint256,bytes,(address,uint256)[],string,string,string)": {
        "details": "mint NFT, set royalties, set metadata json, set lockedcontent emits Minted event"
      },
      "mintWithURI(address,uint256,string,uint256)": {
        "details": "polynetwork CrossChainNFTMapping"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pause()": {
        "details": "Pauses all token transfers. See {ERC1155Pausable} and {Pausable-_pause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "renounceRole(bytes32,address)": {
        "details": "Overload {renounceRole} to track enumerable memberships"
      },
      "revokeRole(bytes32,address)": {
        "details": "Overload {revokeRole} to track enumerable memberships"
      },
      "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)": {
        "details": "See {IERC1155-safeBatchTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,uint256,bytes)": {
        "details": "See {IERC1155-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC1155-setApprovalForAll}."
      },
      "setGhostmarketMintFee(uint256)": {
        "details": "sets Ghostmarket mint fees as uint256 emits MintFeesUpdated event"
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unpause()": {
        "details": "Unpauses all token transfers. See {ERC1155Pausable} and {Pausable-_unpause}. Requirements: - the caller must have the `PAUSER_ROLE`."
      },
      "uri(uint256)": {
        "details": "See {IERC1155MetadataURI-uri}. This implementation returns the same URI for *all* token types. It relies on the token type ID substitution mechanism https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP]. Clients calling this function must replace the `\\{id\\}` substring with the actual token type ID."
      },
      "withdraw(uint256)": {
        "details": "withdraw contract balance emits MintFeesWithdrawn event"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 753,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 756,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 4354,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4740,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 307,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_roles",
        "offset": 0,
        "slot": "101",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)302_storage)"
      },
      {
        "astId": 615,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 62,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_roleMembers",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_bytes32,t_struct(AddressSet)5039_storage)"
      },
      {
        "astId": 219,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 993,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_balances",
        "offset": 0,
        "slot": "201",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 999,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "202",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1001,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_uri",
        "offset": 0,
        "slot": "203",
        "type": "t_string_storage"
      },
      {
        "astId": 2023,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "204",
        "type": "t_array(t_uint256)47_storage"
      },
      {
        "astId": 2283,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "251",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 814,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_paused",
        "offset": 0,
        "slot": "301",
        "type": "t_bool"
      },
      {
        "astId": 905,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "302",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2362,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "351",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5557,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "401",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 920,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_status",
        "offset": 0,
        "slot": "451",
        "type": "t_uint256"
      },
      {
        "astId": 963,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "452",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 627,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_owner",
        "offset": 0,
        "slot": "501",
        "type": "t_address"
      },
      {
        "astId": 746,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "502",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 4651,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_supportedInterfaces",
        "offset": 0,
        "slot": "551",
        "type": "t_mapping(t_bytes4,t_bool)"
      },
      {
        "astId": 4694,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "552",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 5999,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "name",
        "offset": 0,
        "slot": "601",
        "type": "t_string_storage"
      },
      {
        "astId": 6001,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "symbol",
        "offset": 0,
        "slot": "602",
        "type": "t_string_storage"
      },
      {
        "astId": 6012,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_royalties",
        "offset": 0,
        "slot": "603",
        "type": "t_mapping(t_uint256,t_array(t_struct(Royalty)6006_storage)dyn_storage)"
      },
      {
        "astId": 6016,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_lockedContent",
        "offset": 0,
        "slot": "604",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 6020,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_lockedContentViewTracker",
        "offset": 0,
        "slot": "605",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6024,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_metadataJson",
        "offset": 0,
        "slot": "606",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 6056,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_payedMintFeesBalance",
        "offset": 0,
        "slot": "607",
        "type": "t_uint256"
      },
      {
        "astId": 6058,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_ghostmarketMintFees",
        "offset": 0,
        "slot": "608",
        "type": "t_uint256"
      },
      {
        "astId": 6147,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "_tokenIdTracker",
        "offset": 0,
        "slot": "609",
        "type": "t_struct(Counter)4361_storage"
      },
      {
        "astId": 6727,
        "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
        "label": "__gap",
        "offset": 0,
        "slot": "610",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Royalty)6006_storage)dyn_storage": {
        "base": "t_struct(Royalty)6006_storage",
        "encoding": "dynamic_array",
        "label": "struct GhostMarketERC1155.Royalty[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)47_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[47]",
        "numberOfBytes": "1504"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes4": {
        "encoding": "inplace",
        "label": "bytes4",
        "numberOfBytes": "4"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(AddressSet)5039_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct EnumerableSetUpgradeable.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)5039_storage"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)302_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControlUpgradeable.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)302_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes4,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes4",
        "label": "mapping(bytes4 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_array(t_struct(Royalty)6006_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct GhostMarketERC1155.Royalty[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Royalty)6006_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)5039_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.AddressSet",
        "members": [
          {
            "astId": 5038,
            "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4764_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Counter)4361_storage": {
        "encoding": "inplace",
        "label": "struct CountersUpgradeable.Counter",
        "members": [
          {
            "astId": 4360,
            "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)302_storage": {
        "encoding": "inplace",
        "label": "struct AccessControlUpgradeable.RoleData",
        "members": [
          {
            "astId": 299,
            "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 301,
            "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Royalty)6006_storage": {
        "encoding": "inplace",
        "label": "struct GhostMarketERC1155.Royalty",
        "members": [
          {
            "astId": 6003,
            "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
            "label": "recipient",
            "offset": 0,
            "slot": "0",
            "type": "t_address_payable"
          },
          {
            "astId": 6005,
            "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
            "label": "value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4764_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSetUpgradeable.Set",
        "members": [
          {
            "astId": 4759,
            "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4763,
            "contract": "src/GhostmarketERC1155.sol:GhostMarketERC1155",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}